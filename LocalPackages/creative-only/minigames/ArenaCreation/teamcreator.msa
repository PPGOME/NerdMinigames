/**
 * Allows the user to create a new team with the name specified
 * @command
 * @param $name The new team's name
 * @usage /nerdarena create <team name>
 */
*:/nerdarena addteam $arenaid $name = >>>
    if(has_permission(player(), 'nerdarena.create')) {
        @SQL = query('ZombieSQL', 'INSERT INTO `arenateams` (ArenaID, TeamName) VALUES (?, ?)', $arenaid, to_upper($name))
            _mgMessage("Team created!")
    }
<<<

# Allows a user to delete a team their own arena. If an admin/mod (maybe?), can delete other player's teams
*:/nerdarena delteam $arenaid $team = >>>
    if(has_permission(player(), 'nerdarena.delete')) {
        @verify = query('ZombieSQL', 'SELECT ArenaCreator FROM `arena` WHERE ArenaID = ?', $arenaid)
        try{
            if(@verify[0]['ArenaCreator'] == puuid(player()) || has_permission(player(), 'nerdarena.admin')) {
                @SQL = query('ZombieSQL', 'DELETE FROM `arenateams` WHERE TeamName = ?', $team)
                _mgMessage("Team deleted!")
            } else {
            _mgMessage("You don't own that arena.")
            }
        } catch(IndexOverflowException @e) {
            _mgMessage("That arena doesn't exist!")
        }
    }

# Check to see if arena is owned by player running the command. If admin/mod, can delete other player's arenas

<<<


/**
 * Lists $player's created arenas with IDs
 */
*:/nerdarena listteams $arenaid = >>>
    if(has_permission(player(), 'nerdarena.list')) {
        @verify = query('ZombieSQL', 'SELECT ArenaCreator FROM `arena` WHERE ArenaID = ?', $arenaid)
        try{
            if(@verify[0]['ArenaCreator'] == puuid(player()) || has_permission(player(), 'nerdarena.admin')) {
                @SQL = query('ZombieSQL', 'SELECT * FROM `arenateams` WHERE ArenaID = ?', $arenaid)
                _mgMessage("This arena has ".array_size(@SQL)." team(s).")
                foreach(@SQL, @row) {
                    msg(color('AQUA')."ID: ".@row['teamid'].color('GRAY')." | ".color('GOLD')."Name: ".@row['TeamName'])
                }
            } else {
            _mgMessage("You don't own that arena.")
            }
        } catch(IndexOverflowException @e) {
            _mgMessage("That arena doesn't exist!")
        }
    }

<<<
